// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionInput transaction input
//
// swagger:model TransactionInput
type TransactionInput struct {

	// fulfillment
	// Required: true
	Fulfillment interface{} `json:"fulfillment"`

	// fulfills
	// Required: true
	Fulfills *Fulfills `json:"fulfills"`

	// owners before
	// Required: true
	// Min Items: 1
	// Unique: true
	OwnersBefore []string `json:"owners_before"`
}

// Validate validates this transaction input
func (m *TransactionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnersBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionInput) validateFulfillment(formats strfmt.Registry) error {

	if m.Fulfillment == nil {
		return errors.Required("fulfillment", "body", nil)
	}

	return nil
}

func (m *TransactionInput) validateFulfills(formats strfmt.Registry) error {

	if err := validate.Required("fulfills", "body", m.Fulfills); err != nil {
		return err
	}

	if m.Fulfills != nil {
		if err := m.Fulfills.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfills")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfills")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionInput) validateOwnersBefore(formats strfmt.Registry) error {

	if err := validate.Required("owners_before", "body", m.OwnersBefore); err != nil {
		return err
	}

	iOwnersBeforeSize := int64(len(m.OwnersBefore))

	if err := validate.MinItems("owners_before", "body", iOwnersBeforeSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("owners_before", "body", m.OwnersBefore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transaction input based on the context it is used
func (m *TransactionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionInput) contextValidateFulfills(ctx context.Context, formats strfmt.Registry) error {

	if m.Fulfills != nil {

		if err := m.Fulfills.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfills")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfills")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionInput) UnmarshalBinary(b []byte) error {
	var res TransactionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
