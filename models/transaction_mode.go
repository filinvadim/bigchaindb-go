// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionMode transaction mode
//
// swagger:model TransactionMode
type TransactionMode string

func NewTransactionMode(value TransactionMode) *TransactionMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TransactionMode.
func (m TransactionMode) Pointer() *TransactionMode {
	return &m
}

const (

	// TransactionModeAsync captures enum value "async"
	TransactionModeAsync TransactionMode = "async"

	// TransactionModeSync captures enum value "sync"
	TransactionModeSync TransactionMode = "sync"

	// TransactionModeCommit captures enum value "commit"
	TransactionModeCommit TransactionMode = "commit"
)

// for schema
var transactionModeEnum []interface{}

func init() {
	var res []TransactionMode
	if err := json.Unmarshal([]byte(`["async","sync","commit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionModeEnum = append(transactionModeEnum, v)
	}
}

func (m TransactionMode) validateTransactionModeEnum(path, location string, value TransactionMode) error {
	if err := validate.EnumCase(path, location, value, transactionModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction mode
func (m TransactionMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction mode based on context it is used
func (m TransactionMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
