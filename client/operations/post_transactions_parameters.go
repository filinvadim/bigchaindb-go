// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/filinvadim/bigchaindb-go/models"
)

// NewPostTransactionsParams creates a new PostTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostTransactionsParams() *PostTransactionsParams {
	return &PostTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostTransactionsParamsWithTimeout creates a new PostTransactionsParams object
// with the ability to set a timeout on a request.
func NewPostTransactionsParamsWithTimeout(timeout time.Duration) *PostTransactionsParams {
	return &PostTransactionsParams{
		timeout: timeout,
	}
}

// NewPostTransactionsParamsWithContext creates a new PostTransactionsParams object
// with the ability to set a context for a request.
func NewPostTransactionsParamsWithContext(ctx context.Context) *PostTransactionsParams {
	return &PostTransactionsParams{
		Context: ctx,
	}
}

// NewPostTransactionsParamsWithHTTPClient creates a new PostTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostTransactionsParamsWithHTTPClient(client *http.Client) *PostTransactionsParams {
	return &PostTransactionsParams{
		HTTPClient: client,
	}
}

/*
PostTransactionsParams contains all the parameters to send to the API endpoint

	for the post transactions operation.

	Typically these are written to a http.Request.
*/
type PostTransactionsParams struct {

	/* Mode.

	   Transaction mode (async, sync, commit)

	   Default: "async"
	*/
	Mode *string

	/* PostBody.

	   Transaction body
	*/
	PostBody *models.Transaction

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTransactionsParams) WithDefaults() *PostTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTransactionsParams) SetDefaults() {
	var (
		modeDefault = string("async")
	)

	val := PostTransactionsParams{
		Mode: &modeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post transactions params
func (o *PostTransactionsParams) WithTimeout(timeout time.Duration) *PostTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post transactions params
func (o *PostTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post transactions params
func (o *PostTransactionsParams) WithContext(ctx context.Context) *PostTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post transactions params
func (o *PostTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post transactions params
func (o *PostTransactionsParams) WithHTTPClient(client *http.Client) *PostTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post transactions params
func (o *PostTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMode adds the mode to the post transactions params
func (o *PostTransactionsParams) WithMode(mode *string) *PostTransactionsParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the post transactions params
func (o *PostTransactionsParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithPostBody adds the postBody to the post transactions params
func (o *PostTransactionsParams) WithPostBody(postBody *models.Transaction) *PostTransactionsParams {
	o.SetPostBody(postBody)
	return o
}

// SetPostBody adds the postBody to the post transactions params
func (o *PostTransactionsParams) SetPostBody(postBody *models.Transaction) {
	o.PostBody = postBody
}

// WriteToRequest writes these params to a swagger request
func (o *PostTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Mode != nil {

		// query param mode
		var qrMode string

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}
	if o.PostBody != nil {
		if err := r.SetBodyParam(o.PostBody); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
