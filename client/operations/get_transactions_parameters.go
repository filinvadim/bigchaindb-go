// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTransactionsParams creates a new GetTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTransactionsParams() *GetTransactionsParams {
	return &GetTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionsParamsWithTimeout creates a new GetTransactionsParams object
// with the ability to set a timeout on a request.
func NewGetTransactionsParamsWithTimeout(timeout time.Duration) *GetTransactionsParams {
	return &GetTransactionsParams{
		timeout: timeout,
	}
}

// NewGetTransactionsParamsWithContext creates a new GetTransactionsParams object
// with the ability to set a context for a request.
func NewGetTransactionsParamsWithContext(ctx context.Context) *GetTransactionsParams {
	return &GetTransactionsParams{
		Context: ctx,
	}
}

// NewGetTransactionsParamsWithHTTPClient creates a new GetTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTransactionsParamsWithHTTPClient(client *http.Client) *GetTransactionsParams {
	return &GetTransactionsParams{
		HTTPClient: client,
	}
}

/*
GetTransactionsParams contains all the parameters to send to the API endpoint

	for the get transactions operation.

	Typically these are written to a http.Request.
*/
type GetTransactionsParams struct {

	/* AssetID.

	   Asset ID
	*/
	AssetID *string

	/* LastTx.

	   Return only the last transaction
	*/
	LastTx *bool

	/* Operation.

	   Operation type (CREATE or TRANSFER)
	*/
	Operation *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransactionsParams) WithDefaults() *GetTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransactionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get transactions params
func (o *GetTransactionsParams) WithTimeout(timeout time.Duration) *GetTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transactions params
func (o *GetTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transactions params
func (o *GetTransactionsParams) WithContext(ctx context.Context) *GetTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transactions params
func (o *GetTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transactions params
func (o *GetTransactionsParams) WithHTTPClient(client *http.Client) *GetTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transactions params
func (o *GetTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetID adds the assetID to the get transactions params
func (o *GetTransactionsParams) WithAssetID(assetID *string) *GetTransactionsParams {
	o.SetAssetID(assetID)
	return o
}

// SetAssetID adds the assetId to the get transactions params
func (o *GetTransactionsParams) SetAssetID(assetID *string) {
	o.AssetID = assetID
}

// WithLastTx adds the lastTx to the get transactions params
func (o *GetTransactionsParams) WithLastTx(lastTx *bool) *GetTransactionsParams {
	o.SetLastTx(lastTx)
	return o
}

// SetLastTx adds the lastTx to the get transactions params
func (o *GetTransactionsParams) SetLastTx(lastTx *bool) {
	o.LastTx = lastTx
}

// WithOperation adds the operation to the get transactions params
func (o *GetTransactionsParams) WithOperation(operation *string) *GetTransactionsParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the get transactions params
func (o *GetTransactionsParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetID != nil {

		// query param asset_id
		var qrAssetID string

		if o.AssetID != nil {
			qrAssetID = *o.AssetID
		}
		qAssetID := qrAssetID
		if qAssetID != "" {

			if err := r.SetQueryParam("asset_id", qAssetID); err != nil {
				return err
			}
		}
	}

	if o.LastTx != nil {

		// query param last_tx
		var qrLastTx bool

		if o.LastTx != nil {
			qrLastTx = *o.LastTx
		}
		qLastTx := swag.FormatBool(qrLastTx)
		if qLastTx != "" {

			if err := r.SetQueryParam("last_tx", qLastTx); err != nil {
				return err
			}
		}
	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string

		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
