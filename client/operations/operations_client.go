// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAssets(params *GetAssetsParams, opts ...ClientOption) (*GetAssetsOK, error)

	GetBlocks(params *GetBlocksParams, opts ...ClientOption) (*GetBlocksOK, error)

	GetBlocksBlockHeight(params *GetBlocksBlockHeightParams, opts ...ClientOption) (*GetBlocksBlockHeightOK, error)

	GetMetadata(params *GetMetadataParams, opts ...ClientOption) (*GetMetadataOK, error)

	GetOutputs(params *GetOutputsParams, opts ...ClientOption) (*GetOutputsOK, error)

	GetTransactions(params *GetTransactionsParams, opts ...ClientOption) (*GetTransactionsOK, error)

	GetTransactionsTransactionID(params *GetTransactionsTransactionIDParams, opts ...ClientOption) (*GetTransactionsTransactionIDOK, error)

	PostTransactions(params *PostTransactionsParams, opts ...ClientOption) (*PostTransactionsAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAssets gets assets by text search

Retrieves assets that match a given text search
*/
func (a *Client) GetAssets(params *GetAssetsParams, opts ...ClientOption) (*GetAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssets",
		Method:             "GET",
		PathPattern:        "/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlocks gets blocks by transaction ID

Retrieves a list of block IDs that contain a transaction with the specified transaction ID
*/
func (a *Client) GetBlocks(params *GetBlocksParams, opts ...ClientOption) (*GetBlocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlocks",
		Method:             "GET",
		PathPattern:        "/blocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlocksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlocksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlocks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlocksBlockHeight gets block by height

Retrieves the block with the specified block height
*/
func (a *Client) GetBlocksBlockHeight(params *GetBlocksBlockHeightParams, opts ...ClientOption) (*GetBlocksBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlocksBlockHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBlocksBlockHeight",
		Method:             "GET",
		PathPattern:        "/blocks/{block_height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlocksBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlocksBlockHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlocksBlockHeight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetadata gets metadata objects by text search

Retrieves metadata objects that match a given text search
*/
func (a *Client) GetMetadata(params *GetMetadataParams, opts ...ClientOption) (*GetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMetadata",
		Method:             "GET",
		PathPattern:        "/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOutputs gets transaction outputs

Retrieves transaction outputs by public key
*/
func (a *Client) GetOutputs(params *GetOutputsParams, opts ...ClientOption) (*GetOutputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOutputs",
		Method:             "GET",
		PathPattern:        "/outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOutputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOutputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTransactions gets a list of transactions
*/
func (a *Client) GetTransactions(params *GetTransactionsParams, opts ...ClientOption) (*GetTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTransactions",
		Method:             "GET",
		PathPattern:        "/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTransactionsTransactionID gets a transaction by ID
*/
func (a *Client) GetTransactionsTransactionID(params *GetTransactionsTransactionIDParams, opts ...ClientOption) (*GetTransactionsTransactionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionsTransactionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTransactionsTransactionID",
		Method:             "GET",
		PathPattern:        "/transactions/{transaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTransactionsTransactionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransactionsTransactionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTransactionsTransactionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTransactions sends a transaction
*/
func (a *Client) PostTransactions(params *PostTransactionsParams, opts ...ClientOption) (*PostTransactionsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTransactions",
		Method:             "POST",
		PathPattern:        "/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTransactionsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
